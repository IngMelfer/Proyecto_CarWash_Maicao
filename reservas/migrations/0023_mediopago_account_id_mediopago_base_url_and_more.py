# Generated by Django 4.2.11 on 2025-09-25 20:31

from django.db import migrations, models
from django.db import connection


def add_fields_if_not_exist(apps, schema_editor):
    """
    Agrega campos solo si no existen para evitar errores de duplicación.
    """
    cursor = connection.cursor()
    
    # Verificar qué campos ya existen
    try:
        # Para SQLite (desarrollo)
        cursor.execute("PRAGMA table_info(reservas_mediopago);")
        existing_columns = [row[1] for row in cursor.fetchall()]
    except:
        try:
            # Para MySQL (producción)
            cursor.execute("DESCRIBE reservas_mediopago;")
            existing_columns = [row[0] for row in cursor.fetchall()]
        except:
            existing_columns = []
    
    # Definir campos a agregar
    fields_to_add = [
        ('account_id', 'VARCHAR(100)'),
        ('base_url', 'VARCHAR(200)'),
        ('client_id', 'VARCHAR(255)'),
        ('client_secret', 'VARCHAR(255)'),
        ('public_key', 'VARCHAR(255)'),
        ('webhook_url', 'VARCHAR(200)')
    ]
    
    # Agregar solo campos que no existen
    for field_name, field_type in fields_to_add:
        if field_name not in existing_columns:
            try:
                cursor.execute(f"ALTER TABLE reservas_mediopago ADD COLUMN {field_name} {field_type} NULL;")
                print(f"Campo {field_name} agregado exitosamente.")
            except Exception as e:
                print(f"Campo {field_name} ya existe o error: {e}")
        else:
            print(f"Campo {field_name} ya existe, omitiendo.")


def remove_fields_if_exist(apps, schema_editor):
    """
    Elimina campos si existen.
    """
    cursor = connection.cursor()
    
    fields_to_remove = ['account_id', 'base_url', 'client_id', 'client_secret', 'public_key', 'webhook_url']
    
    for field_name in fields_to_remove:
        try:
            cursor.execute(f"ALTER TABLE reservas_mediopago DROP COLUMN {field_name};")
        except:
            pass


class Migration(migrations.Migration):

    dependencies = [
        ('reservas', '0022_reserva_asignacion_automatica_and_more'),
    ]

    operations = [
        migrations.RunPython(
            add_fields_if_not_exist,
            remove_fields_if_exist,
        ),
    ]
