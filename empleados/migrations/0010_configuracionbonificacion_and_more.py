# Generated by Django 4.2.11 on 2025-10-03 11:46

from django.db import migrations, models, connection
import django.db.models.deletion


class ConfiguracionBonificacionCreateModel(migrations.CreateModel):
    """
    Operación personalizada para crear el modelo ConfiguracionBonificacion
    que verifica si la tabla ya existe antes de crearla.
    """
    
    def database_forwards(self, app_label, schema_editor, from_state, to_state):
        # Verificar si la tabla ya existe
        with connection.cursor() as cursor:
            cursor.execute("""
                SELECT name FROM sqlite_master 
                WHERE type='table' AND name='empleados_configuracionbonificacion';
            """)
            table_exists = cursor.fetchone() is not None
        
        if table_exists:
            print("La tabla empleados_configuracionbonificacion ya existe, omitiendo creación...")
            return
        
        print("Creando tabla empleados_configuracionbonificacion...")
        # Si la tabla no existe, ejecutar la creación normal
        super().database_forwards(app_label, schema_editor, from_state, to_state)
    
    def database_backwards(self, app_label, schema_editor, from_state, to_state):
        # Para la reversión, solo eliminar si la tabla existe y no existía antes
        super().database_backwards(app_label, schema_editor, from_state, to_state)


class Migration(migrations.Migration):

    dependencies = [
        ('empleados', '0009_alter_calificacion_unique_together_and_more'),
    ]

    operations = [
        ConfiguracionBonificacionCreateModel(
            name='ConfiguracionBonificacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100, verbose_name='Nombre de la Bonificación')),
                ('descripcion', models.TextField(verbose_name='Descripción')),
                ('tipo', models.CharField(choices=[('servicios', 'Por cantidad de servicios'), ('mensual', 'Por desempeño mensual')], max_length=20, verbose_name='Tipo de Bonificación')),
                ('servicios_requeridos', models.PositiveIntegerField(verbose_name='Servicios Requeridos')),
                ('calificacion_minima', models.DecimalField(decimal_places=1, max_digits=2, verbose_name='Calificación Mínima')),
                ('monto_bonificacion', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Monto de Bonificación')),
                ('activo', models.BooleanField(default=True, verbose_name='Activo')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Creación')),
                ('fecha_actualizacion', models.DateTimeField(auto_now=True, verbose_name='Última Actualización')),
            ],
            options={
                'verbose_name': 'Configuración de Bonificación',
                'verbose_name_plural': 'Configuraciones de Bonificaciones',
                'ordering': ['tipo', 'servicios_requeridos'],
            },
        ),
        migrations.AddField(
            model_name='incentivo',
            name='otorgado_automaticamente',
            field=models.BooleanField(default=False, verbose_name='Otorgado Automáticamente'),
        ),
        migrations.AddField(
            model_name='incentivo',
            name='configuracion_bonificacion',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='incentivos_otorgados', to='empleados.configuracionbonificacion', verbose_name='Configuración de Bonificación'),
        ),
    ]
