# Generated by Django 4.2.11 on 2025-09-26 14:49

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


def check_and_create_configuracionbonificacion_model(apps, schema_editor):
    """
    Verifica si la tabla empleados_configuracionbonificacion existe antes de crearla.
    Si existe, omite la creación para evitar errores de tabla duplicada.
    """
    db_alias = schema_editor.connection.alias
    connection = schema_editor.connection
    
    # Verificar si la tabla ya existe
    table_name = 'empleados_configuracionbonificacion'
    with connection.cursor() as cursor:
        cursor.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name=?
        """, [table_name])
        
        if cursor.fetchone():
            # La tabla ya existe, no hacer nada
            return
    
    # Si la tabla no existe, crearla usando el modelo
    ConfiguracionBonificacion = apps.get_model('empleados', 'ConfiguracionBonificacion')
    schema_editor.create_model(ConfiguracionBonificacion)


class ConfiguracionBonificacionCreateModel(migrations.CreateModel):
    """
    Operación personalizada para crear ConfiguracionBonificacion que verifica
    si la tabla ya existe antes de intentar crearla.
    """
    
    def database_forwards(self, app_label, schema_editor, from_state, to_state):
        # Verificar si la tabla ya existe
        table_name = 'empleados_configuracionbonificacion'
        connection = schema_editor.connection
        
        with connection.cursor() as cursor:
            cursor.execute("""
                SELECT name FROM sqlite_master 
                WHERE type='table' AND name=?
            """, [table_name])
            
            if cursor.fetchone():
                # La tabla ya existe, no hacer nada
                return
        
        # Si la tabla no existe, usar el comportamiento normal
        super().database_forwards(app_label, schema_editor, from_state, to_state)


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('empleados', '0006_empleado_email_personal'),
    ]

    operations = [
        migrations.CreateModel(
            name='BonificacionGanada',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('periodo_inicio', models.DateField(verbose_name='Inicio del Período')),
                ('periodo_fin', models.DateField(verbose_name='Fin del Período')),
                ('servicios_completados', models.PositiveIntegerField(default=0, verbose_name='Servicios Completados')),
                ('promedio_calificacion', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True, verbose_name='Promedio de Calificación')),
                ('porcentaje_puntualidad', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='% Puntualidad')),
                ('monto', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Monto')),
                ('estado', models.CharField(choices=[('PENDIENTE', 'Pendiente'), ('DISPONIBLE', 'Disponible para Redimir'), ('REDIMIDA', 'Redimida'), ('PAGADA', 'Pagada'), ('EXPIRADA', 'Expirada')], default='PENDIENTE', max_length=20, verbose_name='Estado')),
                ('fecha_otorgado', models.DateTimeField(auto_now_add=True, verbose_name='Fecha Otorgado')),
                ('fecha_disponible', models.DateTimeField(blank=True, null=True, verbose_name='Fecha Disponible')),
                ('fecha_redimida', models.DateTimeField(blank=True, null=True, verbose_name='Fecha Redimida')),
                ('fecha_pagada', models.DateTimeField(blank=True, null=True, verbose_name='Fecha Pagada')),
                ('fecha_expiracion', models.DateTimeField(blank=True, null=True, verbose_name='Fecha de Expiración')),
                ('notas_admin', models.TextField(blank=True, verbose_name='Notas del Administrador')),
                ('criterio_cumplido', models.TextField(blank=True, verbose_name='Criterio Cumplido')),
            ],
            options={
                'verbose_name': 'Bonificación Ganada',
                'verbose_name_plural': 'Bonificaciones Ganadas',
                'ordering': ['-fecha_otorgado'],
            },
        ),
        migrations.CreateModel(
            name='HistorialRedenciones',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_redencion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Redención')),
                ('monto_redimido', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Monto Redimido')),
                ('metodo_pago', models.CharField(blank=True, max_length=50, verbose_name='Método de Pago')),
                ('notas', models.TextField(blank=True, verbose_name='Notas')),
                ('bonificacion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='empleados.bonificacionganada', verbose_name='Bonificación')),
                ('empleado', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='empleados.empleado', verbose_name='Empleado')),
                ('procesado_por', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Procesado por')),
            ],
            options={
                'verbose_name': 'Historial de Redención',
                'verbose_name_plural': 'Historial de Redenciones',
                'ordering': ['-fecha_redencion'],
            },
        ),
        ConfiguracionBonificacionCreateModel(
            name='ConfiguracionBonificacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(max_length=100, verbose_name='Nombre de la Bonificación')),
                ('descripcion', models.TextField(verbose_name='Descripción')),
                ('tipo_criterio', models.CharField(choices=[('SERVICIOS_COMPLETADOS', 'Servicios Completados'), ('CALIFICACION_PROMEDIO', 'Calificación Promedio'), ('SERVICIOS_Y_CALIFICACION', 'Servicios + Calificación'), ('PUNTUALIDAD', 'Puntualidad'), ('VENTAS_MENSUALES', 'Ventas Mensuales'), ('CLIENTE_SATISFECHO', 'Cliente Satisfecho')], max_length=30, verbose_name='Tipo de Criterio')),
                ('periodo', models.CharField(choices=[('SEMANAL', 'Semanal'), ('MENSUAL', 'Mensual'), ('TRIMESTRAL', 'Trimestral'), ('ANUAL', 'Anual')], default='MENSUAL', max_length=20, verbose_name='Período')),
                ('servicios_requeridos', models.PositiveIntegerField(blank=True, null=True, verbose_name='Servicios Requeridos')),
                ('calificacion_minima', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True, verbose_name='Calificación Mínima')),
                ('porcentaje_puntualidad', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='% Puntualidad Requerido')),
                ('monto_ventas', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True, verbose_name='Monto de Ventas')),
                ('monto_bonificacion', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Monto de Bonificación')),
                ('activa', models.BooleanField(default=True, verbose_name='Activa')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de Creación')),
                ('creado_por', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Creado por')),
            ],
            options={
                'verbose_name': 'Configuración de Bonificación',
                'verbose_name_plural': 'Configuraciones de Bonificaciones',
                'ordering': ['-fecha_creacion'],
            },
        ),
        migrations.AddField(
            model_name='bonificacionganada',
            name='configuracion',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='empleados.configuracionbonificacion', verbose_name='Configuración'),
        ),
        migrations.AddField(
            model_name='bonificacionganada',
            name='empleado',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bonificaciones_ganadas', to='empleados.empleado', verbose_name='Empleado'),
        ),
        migrations.AlterUniqueTogether(
            name='bonificacionganada',
            unique_together={('empleado', 'configuracion', 'periodo_inicio', 'periodo_fin')},
        ),
    ]
