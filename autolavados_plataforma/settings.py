"""
Django settings for autolavados_plataforma project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Cargar variables de entorno desde .env
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-k03^2#n1=kuog)$x+9n6#+i)yz^&w=!vvwlios7!yu+r*rp$jx')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

# Permitir acceso desde localhost, IP local y cualquier host a través de port forwarding
ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1,0.0.0.0,testserver,*').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Aplicaciones de terceros
    'rest_framework',
    'rest_framework.authtoken',  # Añadido para soporte de tokens de autenticación
    'corsheaders',
    
    # Aplicaciones propias
    'autenticacion',
    'clientes',
    'reservas',
    'notificaciones',
    'empleados',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Añadido para servir archivos estáticos en producción
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # CORS middleware
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',  # Asegura protección CSRF
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'autolavados_plataforma.middleware.CSRFDebugMiddleware',  # Middleware para diagnosticar problemas CSRF
    'autolavados_plataforma.middleware.AJAXExceptionMiddleware',  # Middleware para manejar excepciones AJAX
    'autolavados_plataforma.middleware.LoginRequiredMiddleware',
    'autolavados_plataforma.timezone_middleware.TimezoneMiddleware',  # Middleware para manejar zonas horarias
]

ROOT_URLCONF = 'autolavados_plataforma.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],  # Directorio para templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'autolavados_plataforma.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Configuración de la base de datos
# Usar MySQL según variable de entorno
USE_MYSQL = os.getenv('USE_MYSQL', 'False').lower() == 'true'

# Configuración de la base de datos según el entorno
if USE_MYSQL:
    # Configuración para MySQL
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': os.getenv('DB_NAME', 'autolavados_db'),
            'USER': os.getenv('DB_USER', 'autolavados_user'),
            'PASSWORD': os.getenv('DB_PASSWORD', 'autolavados_password'),
            'HOST': os.getenv('DB_HOST', 'localhost'),
            'PORT': os.getenv('DB_PORT', '3306'),
            'OPTIONS': {
                'init_command': "SET sql_mode='STRICT_TRANS_TABLES', time_zone='-05:00'",
                'charset': 'utf8mb4',
            },
        }
    }
else:
    # Usar SQLite por defecto
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = os.getenv('LANGUAGE_CODE', 'es-co')  # Idioma predeterminado

TIME_ZONE = 'America/Bogota'  # Usar Bogotá como zona horaria predeterminada

USE_I18N = os.getenv('USE_I18N', 'True').lower() == 'true'

USE_TZ = False  # Deshabilitado para evitar problemas con MySQL


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = os.getenv('STATIC_URL', 'static/')
STATIC_ROOT = os.path.join(BASE_DIR, os.getenv('STATIC_ROOT', 'staticfiles'))
STATICFILES_DIRS = [os.path.join(BASE_DIR, os.getenv('STATIC_DIR', 'static'))]

# Media files (uploads)
MEDIA_URL = os.getenv('MEDIA_URL', '/media/')
MEDIA_ROOT = os.path.join(BASE_DIR, os.getenv('MEDIA_ROOT', 'media'))

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configuración del modelo de usuario personalizado
AUTH_USER_MODEL = 'autenticacion.Usuario'

# Configuración de backends de autenticación
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
]

# Configuración de REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
}

# Configuración de autenticación
LOGIN_URL = '/autenticacion/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/autenticacion/login/'

# Configuración de sesión
SESSION_COOKIE_AGE = int(os.getenv('SESSION_COOKIE_AGE', '1209600'))  # 2 semanas en segundos por defecto
SESSION_COOKIE_SAMESITE = 'Lax'  # Valor más compatible con navegadores modernos
SESSION_COOKIE_SECURE = False  # No requerir HTTPS para cookies en desarrollo
# SESSION_COOKIE_DOMAIN = os.getenv('SESSION_COOKIE_DOMAIN')  # Dominio para cookies
SESSION_EXPIRE_AT_BROWSER_CLOSE = os.getenv('SESSION_EXPIRE_AT_BROWSER_CLOSE', 'False').lower() == 'true'
SESSION_COOKIE_HTTPONLY = os.getenv('SESSION_COOKIE_HTTPONLY', 'True').lower() == 'true'  # Seguridad JavaScript

# Configuración de cookies CSRF
CSRF_COOKIE_HTTPONLY = False  # Permitir acceso JavaScript al token CSRF
CSRF_COOKIE_SAMESITE = 'Lax'  # Cross-site requests (Lax para desarrollo)
CSRF_USE_SESSIONS = False  # No usar sesiones para CSRF
CSRF_COOKIE_SECURE = False  # No requerir HTTPS para cookies CSRF en desarrollo
CSRF_FAILURE_VIEW = 'django.views.csrf.csrf_failure'  # Vista para errores CSRF
CSRF_TRUSTED_ORIGINS = os.getenv('CSRF_TRUSTED_ORIGINS', 'http://localhost:8000,http://127.0.0.1:8000').split(',')  # Orígenes confiables

# Configuración de logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': os.getenv('LOG_LEVEL', 'DEBUG'),
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['console'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
            'propagate': True,
        },
        'autolavados_plataforma.middleware': {
            'handlers': ['console'],
            'level': os.getenv('APP_LOG_LEVEL', 'DEBUG'),
            'propagate': True,
        },
    },
}

# Configuración de CORS
CORS_ALLOW_ALL_ORIGINS = os.getenv('CORS_ALLOW_ALL_ORIGINS', 'True').lower() == 'true'  # Control de orígenes
CORS_ALLOWED_ORIGINS = os.getenv('CORS_ALLOWED_ORIGINS', 'http://localhost:3000,http://127.0.0.1:3000,http://localhost:8000,http://127.0.0.1:8000').split(',')
# Configuración adicional de CORS para permitir credenciales
CORS_ALLOW_CREDENTIALS = os.getenv('CORS_ALLOW_CREDENTIALS', 'True').lower() == 'true'
CORS_ALLOW_METHODS = os.getenv('CORS_ALLOW_METHODS', 'DELETE,GET,OPTIONS,PATCH,POST,PUT').split(',')
CORS_ALLOW_HEADERS = os.getenv('CORS_ALLOW_HEADERS', 'accept,accept-encoding,authorization,content-type,dnt,origin,user-agent,x-csrftoken,x-requested-with').split(',')


# Configuración de correo electrónico
# Para desarrollo, usar el backend de archivo que guarda los correos en un archivo
EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'
EMAIL_FILE_PATH = os.path.join(BASE_DIR, 'sent_emails')  # Directorio donde se guardarán los correos

# En producción usar SMTP:
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = os.environ.get('EMAIL_HOST')
# EMAIL_PORT = os.environ.get('EMAIL_PORT')
# EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
# EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
# EMAIL_USE_TLS = True

# URL del sitio para enlaces en correos electrónicos
SITE_URL = os.getenv('SITE_URL', 'http://localhost:8000')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'noreply@premiumcardetailing.com')

# Configuración de correo electrónico
EMAIL_BACKEND = os.getenv('EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', '587'))
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True').lower() == 'true'

# Configuración de Nequi API
NEQUI_API_KEY = os.getenv('NEQUI_API_KEY', '')
NEQUI_CLIENT_ID = os.getenv('NEQUI_CLIENT_ID', '')
NEQUI_CLIENT_SECRET = os.getenv('NEQUI_CLIENT_SECRET', '')
NEQUI_BASE_URL = os.getenv('NEQUI_BASE_URL', 'https://api.nequi.com.co')
NEQUI_SANDBOX = os.getenv('NEQUI_SANDBOX', 'True').lower() == 'true'
NEQUI_WEBHOOK_URL = os.getenv('NEQUI_WEBHOOK_URL', f"{SITE_URL}/reservas/callback/nequi/")
NEQUI_SUCCESS_URL = os.getenv('NEQUI_SUCCESS_URL', f"{SITE_URL}/reservas/confirmar-pago/")
NEQUI_CANCEL_URL = os.getenv('NEQUI_CANCEL_URL', f"{SITE_URL}/reservas/cancelar-pago/")
