#!/usr/bin/env python3
"""
Script para configurar archivos est√°ticos y media en PythonAnywhere
Optimizado para el flujo GitHub -> PythonAnywhere

Uso: python configurar_estaticos_pythonanywhere.py
"""

import os
import sys
import subprocess
from pathlib import Path

# Colores para output
class Colors:
    RED = '\033[0;31m'
    GREEN = '\033[0;32m'
    YELLOW = '\033[1;33m'
    BLUE = '\033[0;34m'
    NC = '\033[0m'  # No Color

def log(message, color=Colors.BLUE):
    """Funci√≥n para logging con colores"""
    print(f"{color}[INFO]{Colors.NC} {message}")

def success(message):
    """Mensaje de √©xito"""
    print(f"{Colors.GREEN}[SUCCESS]{Colors.NC} {message}")

def warning(message):
    """Mensaje de advertencia"""
    print(f"{Colors.YELLOW}[WARNING]{Colors.NC} {message}")

def error(message):
    """Mensaje de error"""
    print(f"{Colors.RED}[ERROR]{Colors.NC} {message}")

def run_command(command, description=""):
    """Ejecutar comando y manejar errores"""
    try:
        log(f"Ejecutando: {command}")
        result = subprocess.run(command, shell=True, check=True, 
                              capture_output=True, text=True)
        if result.stdout:
            print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        error(f"Error ejecutando {description}: {e}")
        if e.stderr:
            print(e.stderr)
        return False

def main():
    """Funci√≥n principal"""
    log("Iniciando configuraci√≥n de archivos est√°ticos para PythonAnywhere...")
    
    # Verificar que estamos en el directorio correcto
    if not os.path.exists('manage.py'):
        error("No se encontr√≥ manage.py. Ejecuta este script desde el directorio ra√≠z del proyecto.")
        sys.exit(1)
    
    project_dir = Path.cwd()
    log(f"Directorio del proyecto: {project_dir}")
    
    # ========================================
    # CONFIGURACI√ìN DE DIRECTORIOS
    # ========================================
    
    # Crear directorios necesarios
    directories = [
        'static',
        'staticfiles',
        'media',
        'media/uploads',
        'media/qr_codes',
        'media/profile_pics'
    ]
    
    log("Creando directorios necesarios...")
    for directory in directories:
        dir_path = project_dir / directory
        dir_path.mkdir(parents=True, exist_ok=True)
        success(f"Directorio creado/verificado: {directory}")
    
    # ========================================
    # CONFIGURACI√ìN DE ARCHIVOS EST√ÅTICOS
    # ========================================
    
    log("Configurando archivos est√°ticos...")
    
    # Verificar configuraci√≥n de Django
    if not run_command("python manage.py check", "verificaci√≥n de Django"):
        error("Error en la configuraci√≥n de Django")
        return False
    
    # Recolectar archivos est√°ticos
    if not run_command("python manage.py collectstatic --noinput --clear", 
                      "recolecci√≥n de archivos est√°ticos"):
        warning("Error recolectando archivos est√°ticos, intentando sin --clear")
        if not run_command("python manage.py collectstatic --noinput", 
                          "recolecci√≥n de archivos est√°ticos (sin clear)"):
            error("No se pudieron recolectar los archivos est√°ticos")
            return False
    
    success("Archivos est√°ticos recolectados correctamente")
    
    # ========================================
    # VERIFICACI√ìN DE PERMISOS
    # ========================================
    
    log("Verificando permisos de archivos...")
    
    # Verificar que los directorios tienen los permisos correctos
    for directory in ['static', 'staticfiles', 'media']:
        dir_path = project_dir / directory
        if dir_path.exists():
            # Establecer permisos 755 para directorios
            run_command(f"chmod 755 {dir_path}", f"permisos para {directory}")
            # Establecer permisos 644 para archivos dentro del directorio
            run_command(f"find {dir_path} -type f -exec chmod 644 {{}} \\;", 
                       f"permisos de archivos en {directory}")
    
    # ========================================
    # VERIFICACI√ìN DE ARCHIVOS CR√çTICOS
    # ========================================
    
    log("Verificando archivos cr√≠ticos...")
    
    critical_files = [
        'static/css/style.css',
        'static/js/main.js',
        'static/img/logo.png'
    ]
    
    for file_path in critical_files:
        full_path = project_dir / file_path
        if full_path.exists():
            success(f"Archivo encontrado: {file_path}")
        else:
            warning(f"Archivo no encontrado: {file_path}")
    
    # ========================================
    # INFORMACI√ìN DE CONFIGURACI√ìN
    # ========================================
    
    log("Generando informaci√≥n de configuraci√≥n para PythonAnywhere...")
    
    staticfiles_dir = project_dir / 'staticfiles'
    media_dir = project_dir / 'media'
    
    print("\n" + "="*60)
    print("CONFIGURACI√ìN PARA PANEL WEB DE PYTHONANYWHERE")
    print("="*60)
    print("\nüìÅ ARCHIVOS EST√ÅTICOS:")
    print(f"   URL: /static/")
    print(f"   Directory: {staticfiles_dir}")
    
    print("\nüìÅ ARCHIVOS MEDIA:")
    print(f"   URL: /media/")
    print(f"   Directory: {media_dir}")
    
    print("\nüîß CONFIGURACI√ìN ADICIONAL:")
    print("   1. Ve al panel Web de PythonAnywhere")
    print("   2. En la secci√≥n 'Static files', agrega:")
    print(f"      - URL: /static/ ‚Üí Directory: {staticfiles_dir}")
    print(f"      - URL: /media/ ‚Üí Directory: {media_dir}")
    print("   3. Guarda los cambios")
    print("   4. Recarga tu aplicaci√≥n web")
    
    # ========================================
    # ESTAD√çSTICAS
    # ========================================
    
    log("Generando estad√≠sticas...")
    
    # Contar archivos est√°ticos
    static_count = len(list(staticfiles_dir.rglob('*'))) if staticfiles_dir.exists() else 0
    media_count = len(list(media_dir.rglob('*'))) if media_dir.exists() else 0
    
    print(f"\nüìä ESTAD√çSTICAS:")
    print(f"   Archivos est√°ticos: {static_count}")
    print(f"   Archivos media: {media_count}")
    
    # Tama√±o de directorios
    try:
        static_size = subprocess.run(f"du -sh {staticfiles_dir}", shell=True, 
                                   capture_output=True, text=True)
        if static_size.returncode == 0:
            print(f"   Tama√±o staticfiles: {static_size.stdout.split()[0]}")
    except:
        pass
    
    # ========================================
    # SCRIPT DE VERIFICACI√ìN
    # ========================================
    
    verification_script = project_dir / 'verificar_estaticos.py'
    
    log("Creando script de verificaci√≥n...")
    
    verification_code = '''#!/usr/bin/env python3
"""
Script de verificaci√≥n de archivos est√°ticos
"""
import os
from pathlib import Path

def verificar_estaticos():
    """Verificar que los archivos est√°ticos est√°n configurados correctamente"""
    project_dir = Path.cwd()
    
    print("üîç Verificando configuraci√≥n de archivos est√°ticos...")
    
    # Verificar directorios
    directories = ['static', 'staticfiles', 'media']
    for directory in directories:
        dir_path = project_dir / directory
        if dir_path.exists():
            count = len(list(dir_path.rglob('*')))
            print(f"‚úÖ {directory}: {count} archivos")
        else:
            print(f"‚ùå {directory}: No existe")
    
    # Verificar archivos cr√≠ticos
    critical_files = [
        'staticfiles/admin/css/base.css',
        'staticfiles/css/style.css',
        'static/css/style.css'
    ]
    
    print("\\nüîç Verificando archivos cr√≠ticos...")
    for file_path in critical_files:
        full_path = project_dir / file_path
        if full_path.exists():
            print(f"‚úÖ {file_path}")
        else:
            print(f"‚ùå {file_path}")

if __name__ == "__main__":
    verificar_estaticos()
'''
    
    with open(verification_script, 'w', encoding='utf-8') as f:
        f.write(verification_code)
    
    # Hacer ejecutable
    run_command(f"chmod +x {verification_script}", "permisos del script de verificaci√≥n")
    
    success(f"Script de verificaci√≥n creado: {verification_script}")
    
    # ========================================
    # FINALIZACI√ìN
    # ========================================
    
    print("\n" + "="*60)
    success("¬°Configuraci√≥n de archivos est√°ticos completada!")
    print("="*60)
    
    print("\nüìã PR√ìXIMOS PASOS:")
    print("1. Configura las rutas en el panel Web de PythonAnywhere")
    print("2. Recarga tu aplicaci√≥n web")
    print("3. Ejecuta 'python verificar_estaticos.py' para verificar")
    print("4. Prueba que CSS y JS cargan correctamente en tu sitio")
    
    print(f"\nüîó URL de tu aplicaci√≥n: https://tu_usuario.pythonanywhere.com")
    
    return True

if __name__ == "__main__":
    try:
        success_result = main()
        if success_result:
            sys.exit(0)
        else:
            sys.exit(1)
    except KeyboardInterrupt:
        warning("Operaci√≥n cancelada por el usuario")
        sys.exit(1)
    except Exception as e:
        error(f"Error inesperado: {e}")
        sys.exit(1)